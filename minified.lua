StormUI={}function StormUI.Create(p)local q={pages={},currentPage='default',cticks=0}function q.addPage(r,s)local t=s or{type=0}local u={widgets={},background=t,id=r}function u.proccess(v,w)for x,y in pairs(u.widgets)do y.proccess(v,w)end end function u.draw()if u.background.type==1 then StormUI.utils.setColorToList(u.background.color)screen.drawRectF(0,0,screen.getWidth()+1,screen.getHeight()+1)elseif u.background.type==2 then screen.drawMap(u.background.pos[1],u.background.pos[2],u.background.pos[3])elseif u.background.type==3 then u.background.func(u.id)end for v,w in pairs(u.widgets)do w.draw()end end function u.addToggle(v,w,x,y,z,A,B,C,D,E,F,G,H,I)local J={x=w,y=x,width=y,height=z,outline_color_on=A,outline_color_off=B,fill_color_on=C,fill_color_off=D,label_off=E,label_on=F,label_color_off=H,label_color_on=G,active=I,p_click=false,hold_length=0}function J.proccess(K,L)b=K[1]c=K[2]d=J.x e=J.width+d f=J.y g=J.height+f h=J.p_click i=(b>d and b<e and c>f and c<g)J.p_click=i and K[3]if K[3]then if L==0 then j=J.active if i and not h then k=not k J.active=k end end if i then J.hold_length=J.hold_length+1 else J.hold_length=0 end else J.hold_length=0 end end function J.draw()if J.active then StormUI.utils.setColorToList(J.fill_color_on)screen.drawRectF(J.x,J.y,J.width,J.height)StormUI.utils.setColorToList(J.outline_color_on)screen.drawRect(J.x,J.y,J.width,J.height)StormUI.utils.setColorToList(J.label_color_on)screen.drawTextBox(J.x+1,J.y+1,J.width,J.height,J.label_on,0,0)else StormUI.utils.setColorToList(J.fill_color_off)screen.drawRectF(J.x,J.y,J.width,J.height)StormUI.utils.setColorToList(J.outline_color_off)screen.drawRect(J.x,J.y,J.width,J.height)StormUI.utils.setColorToList(J.label_color_off)screen.drawTextBox(J.x+1,J.y+1,J.width,J.height,J.label_off,0,0)end end u.widgets[v]=J end function u.addPush(v,w,x,y,z,A,B,C,D,E,F,G,H)local I={x=w,y=x,width=y,height=z,outline_color_on=A,outline_color_off=B,fill_color_on=C,fill_color_off=D,label_off=E,label_on=F,label_color_off=H,label_color_on=G,hold_length=0}function I.proccess(J,K)b=J[1]c=J[2]d=I.x e=I.width+d f=I.y g=I.height+f i=(b>d and b<e and c>f and c<g)if J[3]and i then I.hold_length=I.hold_length+1 else I.hold_length=0 end I.active=i and J[3]end function I.draw()if I.active then StormUI.utils.setColorToList(I.fill_color_on)screen.drawRectF(I.x,I.y,I.width,I.height)StormUI.utils.setColorToList(I.outline_color_on)screen.drawRect(I.x,I.y,I.width,I.height)StormUI.utils.setColorToList(I.label_color_on)screen.drawTextBox(I.x+1,I.y+1,I.width,I.height,I.label_on,0,0)else StormUI.utils.setColorToList(I.fill_color_off)screen.drawRectF(I.x,I.y,I.width,I.height)StormUI.utils.setColorToList(I.outline_color_off)screen.drawRect(I.x,I.y,I.width,I.height)StormUI.utils.setColorToList(I.label_color_off)screen.drawTextBox(I.x+1,I.y+1,I.width,I.height,I.label_off,0,0)end end u.widgets[v]=I end function u.addTextbox(v,w,x,y,z,A,B,C,D,E,F)local G={x=w,y=x,width=y,height=z,outline_color=A,fill_color=B,label=C,label_color=D,center_x=E,center_y=F}function G.proccess(H,I)end function G.draw()StormUI.utils.setColorToList(G.fill_color)screen.drawRectF(G.x,G.y,G.width,G.height)StormUI.utils.setColorToList(G.outline_color)screen.drawRect(G.x,G.y,G.width,G.height)StormUI.utils.setColorToList(G.label_color)screen.drawTextBox(G.x+1,G.y+1,G.width,G.height,G.label,G.center_x,G.center_y)end u.widgets[v]=G end function u.addLine(v,w,x,y,z,A)local B={x1=w,y1=x,x2=y,y2=z,color=A}function B.proccess(C,D)end function B.draw()StormUI.utils.setColorToList(B.color)screen.drawLine(B.x1,B.y1,B.x2,B.y2)end u.widgets[v]=B end function u.addRect(v,w,x,y,z,A,B)local C={x=w,y=x,width=y,height=z,border_color=A,fill_color=B}function C.proccess(D,E)end function C.draw()StormUI.utils.setColorToList(C.fill_color)screen.drawRectF(C.x,C.y,C.width,C.height)StormUI.utils.setColorToList(C.border_color)screen.drawRect(C.x,C.y,C.width,C.height)end u.widgets[v]=C end function u.addIndicatorRect(v,w,x,y,z,A,B,C)local D={x=w,y=x,width=y,height=z,border_color=A,fill_color_on=B,fill_color_off=C,active=false}function D.proccess(E,F)end function D.draw()if D.active then StormUI.utils.setColorToList(D.fill_color_on)else StormUI.utils.setColorToList(D.fill_color_off)end screen.drawRectF(D.x,D.y,D.width,D.height)StormUI.utils.setColorToList(D.border_color)screen.drawRect(D.x,D.y,D.width,D.height)end u.widgets[v]=D end function u.addIndicatorCircle(v,w,x,y,z,A,B)local C={x=w,y=x,radius=y,border_color=z,fill_color_on=A,fill_color_off=B,active=false}function C.proccess(D,E)end function C.draw()if C.active then StormUI.utils.setColorToList(C.fill_color_on)else StormUI.utils.setColorToList(C.fill_color_off)end screen.drawCircleF(C.x,C.y,C.radius)StormUI.utils.setColorToList(C.border_color)screen.drawCircle(C.x,C.y,C.radius)end u.widgets[v]=C end q.pages[r]=u end function q.setPage(r)if q.pages[r]then q.currentPage=r end end function q.process(r)q.pages[q.currentPage].proccess(r,q.cticks)if r[3]then q.cticks=q.cticks+1 else q.cticks=0 end end function q.draw()q.pages[q.currentPage].draw()end function q.getPage()return q.pages[q.currentPage]end q.addPage('default',p or{type="blank"})return q end StormUI.utils={}function StormUI.utils.setColorToList(p)l=p[1]m=p[2]n=p[3]o=p[4]screen.setColor(l,m,n,o)end StormUI.colors={}StormUI.colors.Transparent={0,0,0,0}StormUI.colors.White={255,255,255,255}StormUI.colors.Black={0,0,0,255}